def find_substring_locations(s, t):
    positions = []  # List to hold positions where t is found in s
    len_t = len(t)  # Length of the substring t
    
    # Loop through the main string s
    for i in range(len(s) - len_t + 1):
        # Check if the substring matches t
        if s[i:i + len_t] == t:
            positions.append(i + 1)  # Store the position (1-based index)
    
    return positions

# Sample DNA strings
s = "TTACAAGTCGGGCAAGTCGCAAGTCGCAAGTCGCCAAGTCGCTCCAAGTCGTGTTCAAGCAAGTCGGCAAGTCGACACAAGTCGAGTTCAAGTCGTATCAAGTCGGCAAGTCGGCCAAGTCGCAAGTCGTCAAGTCGTAGACAAGTCGGCCAAGTCGGCAAGTCGGGCGCAAGTCGCCCCAAGTCGCATACACAAGTCGCCTCTACTTCAAGTCGACAAGTCGCAAGTCGCCAAGTCGCCAAGTCGCCAAGTCGCCCCAGCTCAAGTCGTAGTGTCAAGTCGCCAAGTCGTCAAGTCGCACAAGTCGCAAGTCGTACGCAAGTCGACATGTCCAAGTCGCACAGATATCAATACAAGTCGGCAAGTCGCAAGTCGGCAAGTCGGCAAGTCGAACAAGTCGACAAGTCGCAAGTCGTCGGCAAGTCGCAAGTCGTAACAAGTCGACAAGTCGCCAAGTCGCCAAGTCGTCAAGTCGCAAGTCGTTAGCACAAGTCGCAAGTCGAATAGCGCTTGCACAAGTCGACCAAGTCGTCCAGAGCAAGTCGCATACAAGTCGGTGACAATGAGTCGTGGCGAAGCAAGTCGCAAGTCGCTTATGTACAAGTCGGCAAGTCGTGCTCCAAGTCGCAAGTCGTGGCAAGTCGGAAGTTACAAGTCGATGTCCGCAAGTCGTCCAAGTCGGCAACCAAGTCGTCAAGTCGCAAGTCGCCGCCATACAAGTCGCAAGTCGCAAGTCGTTCAAGTCGATTGGTAACATCAAGTCGATAGCCCAAGTCGCAAGTCGACAAGTCGCAAGTCGCGGTAGACGATCAAGTCGGTAGGAGACTCAAGTCGCCGGAGACAAGTCGCAAGTCGTCAAGTCGCAAGTCGCAAGTCGCGCAAGTCGCAAGTCGGCAAGTCGCTTAGCAAGTCGACAAGTCGCAAGTCGCA"
t = "ATAT"

# Finding all locations of t in s
result = find_substring_locations(s, t)
print(" ".join(map(str, result)))  # Output positions as space-separated string